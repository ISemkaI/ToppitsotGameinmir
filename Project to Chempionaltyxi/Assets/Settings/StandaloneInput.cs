//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Settings/StandaloneInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StandaloneInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StandaloneInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""StandaloneInput"",
    ""maps"": [
        {
            ""name"": ""Standalone"",
            ""id"": ""52fbe95d-f8bd-44a1-a442-4339ec4b54e2"",
            ""actions"": [
                {
                    ""name"": ""Fire left"",
                    ""type"": ""Button"",
                    ""id"": ""e1981362-208f-4288-a3ac-38a23dfeb9da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire right"",
                    ""type"": ""Button"",
                    ""id"": ""dea74354-d303-48f8-8aa2-3349a3df8f2f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Horizontal"",
                    ""type"": ""Value"",
                    ""id"": ""06c6fea4-0893-4083-bc82-ac2c38492946"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse Vertical"",
                    ""type"": ""Value"",
                    ""id"": ""8c7bc8dd-ff30-4178-8d31-4d3d691d8a17"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7cd88822-6f60-4a35-9347-536b17da9cb0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86a4305f-5303-4e4e-bed8-6d84005b7005"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28c2b6e5-65cf-425f-976b-6fb9c57f63dd"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Horizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53e928a5-e8a0-4601-a16d-4db2d4dd246f"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Vertical"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Standalone
        m_Standalone = asset.FindActionMap("Standalone", throwIfNotFound: true);
        m_Standalone_Fireleft = m_Standalone.FindAction("Fire left", throwIfNotFound: true);
        m_Standalone_Fireright = m_Standalone.FindAction("Fire right", throwIfNotFound: true);
        m_Standalone_MouseHorizontal = m_Standalone.FindAction("Mouse Horizontal", throwIfNotFound: true);
        m_Standalone_MouseVertical = m_Standalone.FindAction("Mouse Vertical", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Standalone
    private readonly InputActionMap m_Standalone;
    private IStandaloneActions m_StandaloneActionsCallbackInterface;
    private readonly InputAction m_Standalone_Fireleft;
    private readonly InputAction m_Standalone_Fireright;
    private readonly InputAction m_Standalone_MouseHorizontal;
    private readonly InputAction m_Standalone_MouseVertical;
    public struct StandaloneActions
    {
        private @StandaloneInput m_Wrapper;
        public StandaloneActions(@StandaloneInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fireleft => m_Wrapper.m_Standalone_Fireleft;
        public InputAction @Fireright => m_Wrapper.m_Standalone_Fireright;
        public InputAction @MouseHorizontal => m_Wrapper.m_Standalone_MouseHorizontal;
        public InputAction @MouseVertical => m_Wrapper.m_Standalone_MouseVertical;
        public InputActionMap Get() { return m_Wrapper.m_Standalone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StandaloneActions set) { return set.Get(); }
        public void SetCallbacks(IStandaloneActions instance)
        {
            if (m_Wrapper.m_StandaloneActionsCallbackInterface != null)
            {
                @Fireleft.started -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnFireleft;
                @Fireleft.performed -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnFireleft;
                @Fireleft.canceled -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnFireleft;
                @Fireright.started -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnFireright;
                @Fireright.performed -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnFireright;
                @Fireright.canceled -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnFireright;
                @MouseHorizontal.started -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnMouseHorizontal;
                @MouseHorizontal.performed -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnMouseHorizontal;
                @MouseHorizontal.canceled -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnMouseHorizontal;
                @MouseVertical.started -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnMouseVertical;
                @MouseVertical.performed -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnMouseVertical;
                @MouseVertical.canceled -= m_Wrapper.m_StandaloneActionsCallbackInterface.OnMouseVertical;
            }
            m_Wrapper.m_StandaloneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Fireleft.started += instance.OnFireleft;
                @Fireleft.performed += instance.OnFireleft;
                @Fireleft.canceled += instance.OnFireleft;
                @Fireright.started += instance.OnFireright;
                @Fireright.performed += instance.OnFireright;
                @Fireright.canceled += instance.OnFireright;
                @MouseHorizontal.started += instance.OnMouseHorizontal;
                @MouseHorizontal.performed += instance.OnMouseHorizontal;
                @MouseHorizontal.canceled += instance.OnMouseHorizontal;
                @MouseVertical.started += instance.OnMouseVertical;
                @MouseVertical.performed += instance.OnMouseVertical;
                @MouseVertical.canceled += instance.OnMouseVertical;
            }
        }
    }
    public StandaloneActions @Standalone => new StandaloneActions(this);
    public interface IStandaloneActions
    {
        void OnFireleft(InputAction.CallbackContext context);
        void OnFireright(InputAction.CallbackContext context);
        void OnMouseHorizontal(InputAction.CallbackContext context);
        void OnMouseVertical(InputAction.CallbackContext context);
    }
}
